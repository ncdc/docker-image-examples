#!/bin/bash

# restore maven dependencies downloaded in a previous build,
# so they do not have to be downloaded again.
# /tmp/artifacts will only be present in the incremental build scenario
# in which the target image name is an existing docker image which contains
# dependencies from a prior build execution.
function restore_saved_artifacts() {
  if [ -f /tmp/artifacts/wildfly.tar.gz ]; then
    pushd /opt/wildfly &> /dev/null
    echo -n "Restoring saved artifacts from prior build..."
    tar zxf /tmp/artifacts/wildfly.tar.gz
    echo "...done"
    popd &> /dev/null
  fi
}

# Source code provided to STI will be bind-mounted at /tmp/src
# and then copied into /opt/wildfly/source for building.
local_source_dir=/opt/wildfly/source

# Resulting WAR files will be deployed to /wildfly/standalone/deployments
deploy_dir=/wildfly/standalone/deployments
mkdir -p $deploy_dir

# restore any artifacts from a previous build
restore_saved_artifacts

# Copy the source from the bind mount in preparation for compilation
cp -ad /tmp/src/* $local_source_dir

# If a pom.xml is present, this is a normal build scenario
# so run maven.
if [ -f "$local_source_dir/pom.xml" ]; then

  pushd $local_source_dir &> /dev/null
  JAVA_HOME=/etc/alternatives/java_sdk_1.7.0

  if [ -z $MAVEN_TARGETS ]; then
    MAVEN_TARGETS="package"
  fi

  if [ -z $MAVEN_PROFILES ]; then
    MAVEN_PROFILES="-Popenshift"
  fi

  if [ -z $MAVEN_OPTIONS ]; then
    MAVEN_OPTIONS="-DskipTests"
  fi

  # run maven
  mvn $MAVEN_TARGETS $MAVEN_PROFILES $MAVEN_OPTIONS
  err=$?
  if [ $err -ne 0 ]; then
    echo "Aborting due to error code $err from mvn package"
    exit $err
  fi
fi

echo "Copying war/ear files into $deploy_dir for later deployment..."
if [ -d $local_source_dir/target ]; then
  cp $local_source_dir/target/*.war $deploy_dir >& /dev/null
  cp $local_source_dir/target/*.ear $deploy_dir >& /dev/null
fi
if [ -d $local_source_dir/deployments ]; then
  cp $local_source_dir/deployments/*.war $deploy_dir >& /dev/null
  cp $local_source_dir/deployments/*.ear $deploy_dir >& /dev/null
fi

if [ -d $local_source_dir/cfg ]; then
  echo "Copying config files from project..."
  cp cfg/* /wildfly/standalone/configuration >& /dev/null
fi

if [ -d $local_source_dir/modules ]; then
  echo "Copying modules from project..."
  mkdir /wildfly/provided_modules
  cp -r modules/* /wildfly/provided_modules >& /dev/null
fi

echo "...done"

popd &> /dev/null
